# -*- coding: utf-8 -*-
"""

    @author: Fabio Erculiani <lxnay@sabayonlinux.org>
    @contact: lxnay@sabayonlinux.org
    @copyright: Fabio Erculiani
    @license: GPL-2

    B{Entropy Package Manager Client EntropyRepository plugin code}.

"""
from entropy.const import const_debug_write
from entropy.db.skel import EntropyRepositoryPlugin

class ClientEntropyRepositoryPlugin(EntropyRepositoryPlugin):

    def __init__(self, client_interface, metadata = None):
        """
        Entropy client-side repository EntropyRepository Plugin class.
        This class will be instantiated and automatically added to
        EntropyRepository instances generated by Entropy Client.

        @param client_interface: Entropy Client interface instance
        @type client_interface: entropy.client.interfaces.Client class
        @param metadata: any dict form metadata map (key => value)
        @type metadata: dict
        """
        EntropyRepositoryPlugin.__init__(self)
        self._client = client_interface
        if metadata is None:
            self._metadata = {}
        else:
            self._metadata = metadata

        # make sure we set client_repo metadata to True, this indicates
        # EntropyRepository that we are a client-side repository
        # Of course, it shouldn't make any diff to not set this, but we
        # really want to make sure it's always enforced.
        self._metadata['client_repo'] = True

    def get_id(self):
        return "__client__"

    def get_metadata(self):
        return self._metadata

    def add_plugin_hook(self, entropy_repository_instance):
        const_debug_write(__name__,
            "ClientEntropyRepositoryPlugin: calling add_plugin_hook => %s" % (
                self,)
            )

        out_intf = self._metadata.get('output_interface')
        if out_intf is not None:
            entropy_repository_instance.updateProgress = out_intf.updateProgress
            entropy_repository_instance.askQuestion = out_intf.askQuestion

        return 0
