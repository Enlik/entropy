#!/usr/bin/python
'''
    # DESCRIPTION:
    # Portage tree manager and package builder following specified schemas

    Copyright (C) 2007 Fabio Erculiani

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
'''

# Never do "import portage" here, please use entropyTools binding

import os
import sys
import string

sys.path.append('../libraries')
import entropyTools
import enzymeTools
from entropyConstants import *

# CONSTANTS
APPNAME = "enzyme"
APPVERSION = "1.0"
def print_help():
    print "* info  * : Sabayon Linux "+APPNAME+" (C - 2007)"
    print
    print "* usage * : "+APPNAME+" <tool> <atom(s)>"
    print "* opts  * : --help\t\tthis output"
    print "* opts  * : --version\t\tprint version"
    print "* opts  * : --verbose\t\tprint debugging info"
    print
    print "* info  * : tools available: "
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("world"))+"\t\t to build all the possible new packages"
    print "* opts  * : \t\t"+entropyTools.red("--rebuild-all")+"\t\t force the repackaging of all the packages"
    print "* opts  * : \t\t"+entropyTools.red("--update")+"\t\t used with --rebuild-all it also updates all the packages"
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("build"))+"\t\t to build all the packages specified in <atom(s)>"
    print "* opts  * : \t\t"+entropyTools.red("--force-rebuild")+"\t\t force the building of the package, nevertheless"
    print "* opts  * : \t\t"+entropyTools.red("--force-repackage")+"\t force the repackaging of all the possible package"
    print "* opts  * : \t\t"+entropyTools.red("--deep")+"\t\t analyze the dependencies deeply"
    print "* opts  * : \t\t"+entropyTools.red("--pretend")+"\t\t just show what should be done"
    print "* opts  * : \t\t"+entropyTools.red("--ignore-conflicts")+"\t ignore conflicts between packages"
    print "* opts  * : \t\t"+entropyTools.red("--no-interaction")+"\t disable user interaction, automatic driving"
    print "* opts  * : \t\t"+entropyTools.red("--simulate-building")+"\t compilations are simulated only"
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("uninstall"))+"\t to uninstall one or a list of packages"
    print "* opts  * : \t\t"+entropyTools.red("--pretend")+"\t\t just show what would be done"
    print "* opts  * : \t\t"+entropyTools.red("--just-prune")+"\t\t with slotted packages, keep only the latest, remove the rest"
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("overlay"))+"\t\t to manage overlays"
    print "* opts  * : \t\t "+entropyTools.red("add")+"\t\t\t to add overlays"
    print "* opts  * : \t\t "+entropyTools.red("remove")+"\t\t\t to remove overlays"
    print "* opts  * : \t\t "+entropyTools.red("sync")+"\t\t\t to sync overlays (after this you can specify which overlay)"
    print "* opts  * : \t\t "+entropyTools.red("list")+"\t\t\t to list overlays"
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("sync"))+"\t\t to just sync portage tree"
    print "* opts  * : \t\t "+entropyTools.red("--sync-back")+"\t\t sync between Entropy Portage Tree and the official one"
    print "* opts  * : \t\t "+entropyTools.red("--only-sync-back")+"\t only sync between Entropy Portage Tree and the official one"
    print "* opts  * : \t\t "+entropyTools.red("--no-overlay-sync")+"\t disable automatic overlays sync"
    print "* info  * : \t"+entropyTools.green(entropyTools.bold("cleanup"))+"\t to clean temporary files"
    print

options = sys.argv[1:]

# print version
if (string.join(options).find("--version") != -1) or (string.join(options).find(" -V") != -1):
    entropyTools.print_generic(APPNAME+": "+APPVERSION)
    sys.exit(0)

# print help
if len(options) < 1 or string.join(options).find("--help") != -1 or string.join(options).find(" -h") != -1:
    print_help()
    if len(options) < 1:
	entropyTools.print_error("not enough parameters")
    sys.exit(1)

if (not entropyTools.isRoot()):
    entropyTools.print_error("you must be root in order to run "+APPNAME)
    sys.exit(2)

# world tool
if (options[0] == "world"):
    enzymeTools.world(options)
    sys.exit(0)
# sync tool
if (options[0] == "sync"):
    enzymeTools.sync(options)
    sys.exit(0)
# overlay tool
if (options[0] == "overlay"):
    rc = enzymeTools.overlay(options)
    if (rc):
        sys.exit(0)
    else:
         # an error occoured
	 print_help()
	 sys.exit(3)
# build tool
if (options[0] == "build"):
    enzymeTools.build(options[1:])
    sys.exit(0)
# uninstall tool
if (options[0] == "uninstall"):
    enzymeTools.uninstall(options[1:])
    sys.exit(0)
# uninstall tool
if (options[0] == "cleanup"):
    enzymeTools.cleanup(options[1:])
    sys.exit(0)