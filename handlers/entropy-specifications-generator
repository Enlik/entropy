#!/usr/bin/python
# Copyright Fabio Erculiani - Sabayon Linux 2007

# DESCRIPTION:
# this file get a .tbz2 file as input and creates the dependency binary metafile
# that another application could handle using portage and binpackages extensions directly

import os
import sys
import string

sys.path.append('../libraries')
import entropyTools
from entropyConstants import *

# Create paths
if not os.path.isdir(pTree):
    import getpass
    if getpass.getuser() == "root":
        os.makedirs(pTree,0755)
        os.chown(pTree,0,0)
    else:
        entropyTools.print_error("you need to run this as root at least once.")
	sys.exit(2)
if not os.path.isdir(pTmpDir):
    import getpass
    if getpass.getuser() == "root":
        os.makedirs(pTmpDir,0755)
        os.chown(pTmpDir,0,0)
    else:
        entropyTools.print_error("you need to run this as root at least once.")
	sys.exit(2)
else:
    # Clean pTmpDir
    os.system("rm -rf "+pTmpDir+"/*")

options = sys.argv[1:]

# parameters test
if len(options) < 1 or string.join(options).find("--help") != -1 or string.join(options).find("-h") != -1:
    entropyTools.print_help()
    if len(options) < 1:
	entropyTools.print_error("not enough parameters")
    sys.exit(1)

if len(options) > 2:
    entropyTools.print_help()
    entropyTools.print_error("too many parameters")
    sys.exit(1)

if not string.join(options).find(".tbz2"):
    entropyTools.print_error("no .tbz2 file specified")
    sys.exit(3)

validFile = False
for i in options:
    if os.path.isfile(i) and i.endswith(".tbz2"):
	validFile = True
	tbz2File = i
	break

if (not validFile):
    entropyTools.print_error("no valid .tbz2 file specified")
    sys.exit(4)


entropyTools.print_info(".tbz2 file found: "+tbz2File)

# fill all the info
pData = entropyTools.extractPkgData(tbz2File)
#os.mkdir(pTmpDir+"/")

# ugly, ugly way to print data without caring about type
for i in pData:
    entropyTools.print_generic(i+": "+pData[i]+"\n")
    
# clean garbage
os.system("rm -rf "+pTmpDir+"/"+pData['name']+"-"+pData['version'])
