=head1 NAME

B<reagent> - Official Sabayon Linux Server-Side Package Management tool

=head1 SYNOPSIS

B<reagent> [action] [basic_options] [options] [atom | package_file | @set] ...

B<reagent> [action] [basic_options] [options] ...

B<reagent> --help

B<reagent> --version

=head1 DESCRIPTION

B<reagent> is a server-side repository administration tool used to sync Portage
database with Entropy by phisically creating package files and updating Entropy
repository database.

=head1 BASIC_OPTIONS

=over

=item B<--help (-h)>

this output

=item B<--version>

print version

=item B<--nocolor>

disable colorized output

=back

=head1 OPTIONS

=over

=item B<update>

scan the System looking for newly compiled packages

=over


=item B<--seekstore>

analyze the Entropy Store directory directly

=item B<--repackage <atoms>>

repackage the specified atoms

=item B<--noask>

do not ask anything except critical things

=item B<--atoms <atoms>>

manage only the specified atoms

=item B<--interactive>

run in interactive mode (asking things one by one)

=back


=item B<inject <packages>>

add binary packages to repository w/o affecting scopes (multipackages)

=item B<query>

do some searches into repository databases

=over


=item B<search>

search packages inside the default repository database

=item B<needed>

show runtime libraries needed by the provided atoms

=item B<revdeps>

show what packages depend on the provided atoms

=item B<tags>

show packages owning the specified tags

=item B<sets>

search available package sets

=item B<files>

show files owned by the provided atoms

=item B<belongs>

show from what package the provided files belong

=item B<description>

search packages by description

=item B<eclass>

search packages using the provided eclasses

=item B<list>

list all the packages in the default repository

=item B<graph>

show direct depdendencies tree for provided installable atoms

=over

=item B<--complete>

include system packages, build deps and circularity information

=back

=item B<revgraph>

show reverse depdendencies tree for provided installed atoms

=over

=item B<--complete>

include system packages, build deps and circularity information

=back

=item B<--verbose>

show more details

=item B<--quiet>

print results in a scriptable way

=back


=item B<database>

repository database functions

=over


=item B<--initialize>

(re)initialize the current repository database

=over


=item B<--empty>

do not refill database using packages on mirrors

=item B<--repo=<repo>>

(re)create the database for the specified repository

=back


=item B<bump>

manually force a revision bump for the current repository database

=over


=item B<--sync>

synchronize the database

=back


=item B<flushback [branches]>

flush back old branches packages to current branch

=item B<remove>

remove the provided atoms from the current repository database

=item B<multiremove>

remove the provided injected atoms (all if no atom specified)

=item B<create-empty-database>

create an empty repository database in the provided path

=item B<switchbranch <from branch> <to branch>>

switch to the specified branch the repository

=item B<md5remote>

verify remote integrity of the provided atoms (or world)

=item B<backup>

backup current repository database

=item B<restore>

restore a previously backed-up repository database

=back


=item B<repo>

manage a repository

=over


=item B<enable <repo>>

enable the specified repository

=item B<disable <repo>>

disable the specified repository

=item B<status <repo>>

show the current Server Interface status

=item B<manual-deps <repo> [atoms]>

handle packages manual dependencies

=item B<package-tag <repo> <tag-string> [atoms]>

clone a package assigning it an arbitrary tag

=item B<move <from> <to> [atoms]>

move packages from a repository to another

=item B<copy <from> <to> [atoms]>

copy packages from a repository to another

=item B<default <repo_id>>

set the default repository

=back


=item B<key>

manage repository digital signatures (OpenGPG)

=over


=item B<create [repos]>

create keypair for repositories and sign packages

=item B<delete [repos]>

delete keypair (and digital signatures) of repository

=item B<status [repos]>

show currently configured keys information for given repositories

=item B<sign [repos]>

sign (or re-sign) packages in repository using currently set keypair

=item B<import <repo_id> <privkey_path> <pubkey_path>>

import keypair, bind to given repository

=item B<export-public <repo_id> <key_path>>

export public key of given repository

=back

=item B<export-private <repo_id> <key_path>>

export private key of given repository

=back


=item B<spm>

source package manager functions

=over


=item B<compile>

compilation function

=over


=item B<categories>

compile packages belonging to the provided categories

=over


=item B<--list>

just list packages

=back


=item B<pkgset>

compile packages in provided package set names

=over


=item B<--list>

just list packages

=item B<--rebuild>

rebuild everything

=item B<--dbupdate>

run database update if all went fine

=item B<--dbsync>

run mirror sync if all went fine

=back

=back


=item B<orphans>

scan orphaned packages on SPM

=back


=item B<deptest>

look for unsatisfied dependencies

=item B<libtest>

look for missing libraries

=over

=item B<--dump>

dump results to files

=back

=item B<pkgtest>

verify the integrity of local package files

=item B<revdeps>

regenerate reverse dependencies metadata

=item B<libpaths>

regenerate the library paths table

=item B<cleanup>

remove downloaded packages and clean temp. directories)


=back

=head1 ENVIRONMENT

-B<ETP_REPO>=valid repository id: on-the-fly switch default Entropy repository.

=head1 BUGS

Please report bugs to http://bugs.sabayonlinux.org.

=head1 EXIT STATUS

B<reagent> returns a zero exit status if the called command succeeded. Non zero
is returned in case of failure.

=head1 AUTHOR

Fabio Erculiani <lxnay@sabayon.org>

=head1 SEE ALSO

activator(1), equo(1)